from typing import Any
from langchain.callbacks.base import BaseCallbackHandler

class StreamHandler(BaseCallbackHandler):
    """
    A class that handles streaming of text from a language model.

    Attributes:
        container (Any): A container object where the streamed text will be displayed.
        text (str): A string to accumulate the text being streamed.

    Methods:
        on_llm_new_token(token: str, **kwargs): Appends a new token to the text and updates the container.
    """

    def __init__(self, container: Any, initial_text: str = "") -> None:
        """
        Initialize the StreamHandler with a container and optional initial text.

        Args:
            container (Any): The container where text is to be displayed.
            initial_text (str, optional): Initial text to start with. Defaults to an empty string.
        """
        self.container = container
        self.text = initial_text

    def on_llm_new_token(self, token: str, **kwargs) -> None:
        """
        Callback method for handling new tokens generated by the language model.

        Args:
            token (str): The new token generated by the language model.
            **kwargs: Additional keyword arguments.
        """
        self.text += token
        self.container.markdown(self.text)
